# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ToDoItemsController, type: :controller do
  login_user

  # This should return the minimal set of attributes required to create a valid
  # ToDoItem. As you add validations to ToDoItem, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { attributes_for(:to_do_item).merge(user: @user, deadline: Date.parse('2099-12-31')) }

  let(:invalid_attributes) do
    attributes_for(:to_do_item).merge(user: @user, deadline: Date.parse('2009-12-31'))
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ToDoItemsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'returns a success response' do
      to_do_item = create(:to_do_item, user: @user)
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      to_do_item = create(:to_do_item, user: @user)
      get :show, params: { id: to_do_item.to_param }, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      get :new, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #edit' do
    it 'returns a success response' do
      to_do_item = create(:to_do_item, user: @user)
      get :edit, params: { id: to_do_item.to_param }, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new ToDoItem' do
        expect do
          post :create, params: { to_do_item: valid_attributes }, session: valid_session
        end.to change(ToDoItem, :count).by(1)
      end

      it 'redirects to the created to_do_item' do
        post :create, params: { to_do_item: valid_attributes }, session: valid_session
        expect(response).to redirect_to(ToDoItem.last)
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: { to_do_item: invalid_attributes }, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        { content: 'do the dishes',
          description: 'at work' }
      end

      it 'updates the requested to_do_item' do
        to_do_item = ToDoItem.create! valid_attributes
        put :update, params: { id: to_do_item.to_param, to_do_item: new_attributes }, session: valid_session
        to_do_item.reload
        expect(to_do_item.content).to eq 'do the dishes'
        expect(to_do_item.description).to eq 'at work'
        expect(to_do_item.deadline).to eq Date.parse('2099-12-31')
      end

      it 'redirects to the to_do_item' do
        to_do_item = ToDoItem.create! valid_attributes
        put :update, params: { id: to_do_item.to_param, to_do_item: valid_attributes }, session: valid_session
        expect(response).to redirect_to(to_do_item)
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'edit' template)" do
        to_do_item = ToDoItem.create! valid_attributes
        put :update, params: { id: to_do_item.to_param, to_do_item: invalid_attributes }, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe 'PUT #mark_done' do
    context 'with correct user' do
      it 'changes done attribute to true' do
        to_do_item = create(:to_do_item, user: @user)
        put :mark_done, params: { id: to_do_item.to_param }, session: valid_session
        to_do_item.reload
        expect(to_do_item.done).to eq true
      end
    end
    context 'with other user' do
      it 'returns unauthorized' do
        user = create(:user, email: 'whatever@email.com')
        to_do_item = create(:to_do_item, user: user)
        put :mark_done, params: { id: to_do_item.to_param }, session: valid_session
        expect(response).to have_http_status :unauthorized
      end
    end
  end

  describe 'PUT #mark_removed' do
    context 'with correct user' do
      it 'changes done attribute to true' do
        to_do_item = create(:to_do_item, user: @user)
        put :mark_removed, params: { id: to_do_item.to_param }, session: valid_session
        to_do_item.reload
        expect(to_do_item.removed).to eq true
      end
    end
    context 'with other user' do
      it 'returns unauthorized' do
        user = create(:user, email: 'whatever@email.com')
        to_do_item = create(:to_do_item, user: user)
        put :mark_removed, params: { id: to_do_item.to_param }, session: valid_session
        expect(response).to have_http_status :unauthorized
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested to_do_item' do
      to_do_item = ToDoItem.create! valid_attributes
      expect do
        delete :destroy, params: { id: to_do_item.to_param }, session: valid_session
      end.to change(ToDoItem, :count).by(-1)
    end

    it 'redirects to the to_do_items list' do
      to_do_item = ToDoItem.create! valid_attributes
      delete :destroy, params: { id: to_do_item.to_param }, session: valid_session
      expect(response).to redirect_to(to_do_items_url)
    end
  end
end
